@using BhuInfo.Data.Factory.BusinessFactory
@using BhuInfo.Data.Objects.Entities
@using BhuInfo.Data.Service.DateTimeHelper
@using BhuInfo.Data.Service.Encryption
@using BhuInfo.Data.Service.Enums
@using BhuInfo.Data.Service.TextFormatter
@model IEnumerable<BhuInfo.Data.Objects.Entities.News>
@{
    ViewBag.Title = "General";
    Session["newsmodel"] = null;
    Session["activitymodel"] = Model;

    var newsList = new NewsDataFactory().GetTopNthPopularNewsForCategory(NewsCategoryEnum.General, 4);
    var news = newsList.ToList();

    var newsCategoryList = new NewsDataFactory().GetLatestNewsByCategory(NewsCategoryEnum.General, 2);
    var recentCategoryNews = newsCategoryList.ToList();

    var recentNews = Model.Take(4);
    var mostRecentSingleNews = new NewsDataFactory().GetMostRecentSingleNewsByCategory(NewsCategoryEnum.General);
    var loggedinuser = Session["bhuinfologgedinuser"] as AppUser;
    if (mostRecentSingleNews == null)
    {
        new HttpStatusCodeResult(HttpStatusCode.NotFound);
        return;
    }
    var mostRecentNewsPostedBy = new AppUserFactory().GetAppUserById((int) mostRecentSingleNews.CreatedById);
}
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <div class="content">
        <div class="col-md-7 printing-content">
            <div class="print-main">
                <h3>@mostRecentSingleNews.NewsCategory.Name</h3>
                <a href="#">@mostRecentSingleNews.Title</a>
                <p class="sub_head">
                    Posted by <a href="#">@mostRecentNewsPostedBy.DisplayName</a> @(new DateTimeCalculator().TimeAgo(mostRecentSingleNews.DateCreated))
                </p>
                <a href="#">
                    <img src="~/UploadedFiles/@UploadType.NewsImage/@mostRecentSingleNews.Image" class="img-responsive" alt=""/>
                </a>
                @if (mostRecentSingleNews.Content.Length > 40)
                {
                    <p class="ptext">@(new RemoveCharacters().RemoveSpecialCharacters(mostRecentSingleNews.Content).Substring(0, 80) + "...")</p>
                }
                else
                {
                    <p>@(new RemoveCharacters().RemoveSpecialCharacters(mostRecentSingleNews.Content))</p>
                }
            </div>
            <div class="print-grids">
                @try
                {
                    foreach (var item in recentCategoryNews)
                    {
                        <div class="print-grid">
                            <div class="print-img">
                                <a href="@Url.Action("ViewNewsDetails", "Home", new {Id = new Md5Ecryption().EncryptPrimaryKey(item.NewsId.ToString(), true)})">
                                    <img src="~/UploadedFiles/@UploadType.NewsImage/@item.Image" class="img-responsive" alt=""/>
                                </a>
                            </div>
                            <div class="print-text">
                                <a class="bhead" href="@Url.Action("ViewNewsDetails", "Home", new {Id = new Md5Ecryption().EncryptPrimaryKey(item.NewsId.ToString(), true)})">@item.Title</a>
                               @if (loggedinuser != null)
                               {
                                   <p>
                                       Posted by <a href="@Url.Action("ProfileDetails", "Account", new {Id = new Md5Ecryption().EncryptPrimaryKey(item.CreatedById.ToString(), true)})">@(new AppUserFactory().GetAppUserById((int) item.CreatedById).DisplayName);</a> @(new DateTimeCalculator().TimeAgo(item.DateCreated))
                                   </p>
                               }
                               else
                               {
                                <p>
                                    Posted by <a>@(new AppUserFactory().GetAppUserById((int)item.CreatedById).DisplayName);</a> @(new DateTimeCalculator().TimeAgo(item.DateCreated))
                                </p>
                               }
                                @if (item.Content.Length > 40)
                                {
                                    <p>@(new RemoveCharacters().RemoveSpecialCharacters(item.Content).Substring(0, 80) + "...")</p>
                                }
                                else
                                {
                                    <p>@(new RemoveCharacters().RemoveSpecialCharacters(item.Content))</p>
                                }
                                <a class="more" href="@Url.Action("ViewNewsDetails", "Home", new {Id = new Md5Ecryption().EncryptPrimaryKey(item.NewsId.ToString(), true)})">...Read More</a>
                            </div>
                            <div class="clearfix"></div>
                        </div>
                    }
                }
                catch (ArgumentOutOfRangeException)
                {
                }
            </div>
        </div>
        <div class="col-md-5 content-right">
            <div class="content-right-top">
                <h5 class="head">Popular</h5>

                @try
                {
                    foreach (var item in news)
                    {
                        <a href="@Url.Action("ViewNewsDetails", "Home", new {Id = new Md5Ecryption().EncryptPrimaryKey(item.NewsId.ToString(), true)})">
                            <div class="editor text-center">
                                <h3>@item.Title</h3>
                                @if (item.Content.Length > 40)
                                {
                                    <p>@(new RemoveCharacters().RemoveSpecialCharacters(item.Content).Substring(0, 80) + "...")</p>
                                }
                                else
                                {
                                    <p>@(new RemoveCharacters().RemoveSpecialCharacters(item.Content))</p>
                                }
                                <label style="font-weight: bold">@(new DateTimeCalculator().TimeAgo(item.DateCreated))</label>
                                <br/>
                                <label style="color: black"> @(new DateTimeCalculator().CommentAndViews(item)) </label>
                                <br/>
                                @if ((item.Likes > 1) && (item.Dislikes > 1))
                                {
                                    <label>
                                        <label style="color: green">@item.Likes Likes</label> <label style="color: red">@item.Dislikes Dislikes</label>
                                    </label>
                                }
                                @if ((item.Likes <= 1) && (item.Dislikes <= 1))
                                {
                                    <label>
                                        <label style="color: green">@item.Likes Like</label> <label style="color: red">@item.Dislikes Dislike</label>
                                    </label>
                                }
                                @if ((item.Likes <= 1) && (item.Dislikes > 1))
                                {
                                    <label>
                                        <label style="color: green">@item.Likes Like</label> <label style="color: red">@item.Dislikes Dislikes</label>
                                    </label>
                                }
                                @if ((item.Likes > 1) && (item.Dislikes <= 1))
                                {
                                    <label>
                                        <label style="color: green">@item.Likes Likes</label> <label style="color: red">@item.Dislikes Dislike</label>
                                    </label>
                                }
                                <br/>
                                <span></span>
                            </div>
                        </a>
                    }
                }
                catch (ArgumentOutOfRangeException)
                {
                }
            </div>
            <div class="editors-pic-grids">
                <h5>Recent News</h5>
                @try
                {
                    foreach (var item in recentNews)
                    {
                        <div class="editors-pic">
                            <div class="e-pic">
                                <a href="@Url.Action("ViewNewsDetails", "Home", new {Id = new Md5Ecryption().EncryptPrimaryKey(item.NewsId.ToString(), true)})">
                                    <img src="~/UploadedFiles/@UploadType.NewsImage/@item.Image" alt=""/>
                                </a>
                            </div>
                            <div class="e-pic-info">
                                <a href="@Url.Action("ViewNewsDetails", "Home", new {Id = new Md5Ecryption().EncryptPrimaryKey(item.NewsId.ToString(), true)})">@item.Title</a>
                                <span></span>
                                <label style="font-weight: bold">@(new DateTimeCalculator().TimeAgo(item.DateCreated))</label>
                                <br/>
                                <label style="color: black"> @(new DateTimeCalculator().CommentAndViews(item)) </label>
                                <br/>
                                @if ((item.Likes > 1) && (item.Dislikes > 1))
                                {
                                    <label>
                                        <label style="color: green">@item.Likes Likes</label> <label style="color: red">@item.Dislikes Dislikes</label>
                                    </label>
                                }
                                @if ((item.Likes <= 1) && (item.Dislikes <= 1))
                                {
                                    <label>
                                        <label style="color: green">@item.Likes Like</label> <label style="color: red">@item.Dislikes Dislike</label>
                                    </label>
                                }
                                @if ((item.Likes <= 1) && (item.Dislikes > 1))
                                {
                                    <label>
                                        <label style="color: green">@item.Likes Like</label> <label style="color: red">@item.Dislikes Dislikes</label>
                                    </label>
                                }
                                @if ((item.Likes > 1) && (item.Dislikes <= 1))
                                {
                                    <label>
                                        <label style="color: green">@item.Likes Likes</label> <label style="color: red">@item.Dislikes Dislike</label>
                                    </label>
                                }
                                <br/>
                            </div>
                            <div class="clearfix"></div>
                        </div>
                    }
                }
                catch (ArgumentOutOfRangeException)
                {
                }
            </div>
        </div>
        <div class="clearfix"></div>

        <div class="clearfix"></div>
    </div>
</div>